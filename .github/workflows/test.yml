name: test

run-name: ${{ github.actor }} is a test flow

on: [push]

jobs:
  checkout-repository:
    runs-on: self-hosted
    steps:
      - name: Checkout repository code
        uses: actions/checkout@v3
      - name: Import private extensions
        run: vcs import < extensions.repos

  load-env:
    uses: ./.github/workflows/load-env.yml

### BUILD USING RGL DOCKER ###
#  build-core:
#    needs: [checkout-repository, load-env]
#    uses: ./.github/workflows/build-rgl.yml
#    with:
#      build-command: ./setup.py --build-dir build-core
#      self-hosted-user-id: ${{ needs.load-env.outputs.user-id }}
#      optix-install-dir: ${{ needs.load-env.outputs.optix-install-dir }}
#
#  build-pcl:
#    needs: [checkout-repository, load-env]
#    uses: ./.github/workflows/build-rgl.yml
#    with:
#      build-command: ./setup.py --with-pcl --build-dir build-pcl
#      self-hosted-user-id: ${{ needs.load-env.outputs.user-id }}
#      optix-install-dir: ${{ needs.load-env.outputs.optix-install-dir }}
#
  build-ros2:
    needs: [ checkout-repository, load-env ]
    uses: ./.github/workflows/build-rgl.yml
    with:
      build-command: '
        source /opt/ros/humble/setup.bash &&
        ./setup.py --with-ros2-standalone --build-dir build-ros2'
      self-hosted-user-id: ${{ needs.load-env.outputs.user-id }}
      optix-install-dir: ${{ needs.load-env.outputs.optix-install-dir }}
#
#  build-udp:
#    needs: [ checkout-repository, load-env ]
#    uses: ./.github/workflows/build-rgl.yml
#    with:
#      build-command: ./setup.py --with-udp --build-dir build-udp
#      self-hosted-user-id: ${{ needs.load-env.outputs.user-id }}
#      optix-install-dir: ${{ needs.load-env.outputs.optix-install-dir }}
#
#  build-snow:
#    needs: [ checkout-repository, load-env ]
#    uses: ./.github/workflows/build-rgl.yml
#    with:
#      build-command: ./setup.py --with-snow --build-dir build-snow
#      self-hosted-user-id: ${{ needs.load-env.outputs.user-id }}
#      optix-install-dir: ${{ needs.load-env.outputs.optix-install-dir }}
#
#  build-all:
#    needs: [ checkout-repository, load-env ]
#    uses: ./.github/workflows/build-rgl.yml
#    with:
#      build-command: source /opt/ros/humble/setup.bash && ./setup.py --with-pcl --with-ros2-standalone --with-udp --with-snow --build-dir build-all
#      self-hosted-user-id: ${{ needs.load-env.outputs.user-id }}
#      optix-install-dir: ${{ needs.load-env.outputs.optix-install-dir }}

#### TEST IN RGL DOCKER ###
#  test-core-dev:
#    needs: [build-core]
#    uses: ./.github/workflows/test-rgl.yml
#    with:
#      test-command: cd build-core/test && ./RobotecGPULidar_test
#      docker-image: localhost:5000/rgl:latest
#
#  test-pcl-dev:
#    needs: [ build-pcl ]
#    uses: ./.github/workflows/test-rgl.yml
#    with:
#      test-command: cd build-pcl/test && ./RobotecGPULidar_test
#      docker-image: localhost:5000/rgl:latest
#
#  test-ros2-dev:
#    needs: [ build-ros2 ]
#    uses: ./.github/workflows/test-rgl.yml
#    with:
#      test-command: source /opt/ros/humble/setup.bash && cd build-ros2/test && export RMW_IMPLEMENTATION=rmw_fastrtps_cpp && ./RobotecGPULidar_test && export RMW_IMPLEMENTATION=rmw_cyclonedds_cpp && ./RobotecGPULidar_test
#      docker-image: localhost:5000/rgl:latest
#
#  test-udp-dev:
#    needs: [ build-udp ]
#    uses: ./.github/workflows/test-rgl.yml
#    with:
#      test-command: cd build-udp/test && ./RobotecGPULidar_test
#      docker-image: localhost:5000/rgl:latest
#
#  test-snow-dev:
#    needs: [ build-snow ]
#    uses: ./.github/workflows/test-rgl.yml
#    with:
#      test-command: cd build-snow/test && ./RobotecGPULidar_test
#      docker-image: localhost:5000/rgl:latest
#
#  test-all-dev:
#    needs: [ build-all ]
#    uses: ./.github/workflows/test-rgl.yml
#    with:
#      test-command: source /opt/ros/humble/setup.bash && cd build-all/test && export RMW_IMPLEMENTATION=rmw_fastrtps_cpp && ./RobotecGPULidar_test && export RMW_IMPLEMENTATION=rmw_cyclonedds_cpp && ./RobotecGPULidar_test
#      docker-image: localhost:5000/rgl:latest
#
#### TEST IN CLEAN DOCKER ###
#  test-core-prod:
#    needs: [build-core]
#    uses: ./.github/workflows/test-rgl.yml
#    with:
#      test-command: cd build-core/test && ./RobotecGPULidar_test
#      docker-image: nvidia/cuda:11.7.1-base-ubuntu22.04
#
#  test-pcl-prod:
#    needs: [ build-pcl ]
#    uses: ./.github/workflows/test-rgl.yml
#    with:
#      test-command: cd build-pcl/test && ./RobotecGPULidar_test
#      docker-image: nvidia/cuda:11.7.1-base-ubuntu22.04
#
#  test-ros2-prod:
#    needs: [ build-ros2 ]
#    uses: ./.github/workflows/test-rgl.yml
#    with:
#      test-command: cd build-ros2/test && cp -r ../ros2_standalone/*.so* ../ && export RMW_IMPLEMENTATION=rmw_fastrtps_cpp && ./RobotecGPULidar_test && export RMW_IMPLEMENTATION=rmw_cyclonedds_cpp && ./RobotecGPULidar_test
#      docker-image: nvidia/cuda:11.7.1-base-ubuntu22.04
#
#  test-udp-prod:
#    needs: [ build-udp ]
#    uses: ./.github/workflows/test-rgl.yml
#    with:
#      test-command: cd build-udp/test && ./RobotecGPULidar_test
#      docker-image: nvidia/cuda:11.7.1-base-ubuntu22.04
#
#  test-snow-prod:
#    needs: [ build-snow ]
#    uses: ./.github/workflows/test-rgl.yml
#    with:
#      test-command: cd build-snow/test && ./RobotecGPULidar_test
#      docker-image: nvidia/cuda:11.7.1-base-ubuntu22.04
#
#  test-all-prod:
#    needs: [ build-all ]
#    uses: ./.github/workflows/test-rgl.yml
#    with:
#      test-command: cd build-all/test && cp -r ../ros2_standalone/*.so* ../ && export RMW_IMPLEMENTATION=rmw_fastrtps_cpp && ./RobotecGPULidar_test && export RMW_IMPLEMENTATION=rmw_cyclonedds_cpp && ./RobotecGPULidar_test
#      docker-image: nvidia/cuda:11.7.1-base-ubuntu22.04
































#  build:
#    needs: [checkout-repository, load-env]
#    runs-on: self-hosted
#    steps:
#      - name: build core
#        uses: ./.github/workflows/build-rgl.yml
#        with:
#          RGL_BUILD_COMMAND: ./setup.py --build-dir build-core
#
#      - name: build pcl extension
#        uses: ./.github/workflows/build-rgl.yml
#        with:
#          RGL_BUILD_COMMAND: ./setup.py --with-pcl --build-dir build-pcl

#  build-rgl-base:
#    needs: [checkout-repository, load-env]
#    runs-on: self-hosted
#    container:
#      image: docker://localhost:5000/rgl:latest
#      env:
#        OptiX_INSTALL_DIR: /optix
#        NVIDIA_DRIVER_CAPABILITIES: all
#      volumes:
#        - ${{ needs.load-env.outputs.optix-install-dir }}:/optix
#      options:
#        --gpus all
#        --user ${{ needs.load-env.outputs.user-id }}
#    steps:
#      - name: fix git
#        run: git config --global --add safe.directory $PWD
#      - name: build
#        run: ./setup.py --build-dir build-core
#
#  build-rgl-with-pcl:
#    needs: [ checkout-repository, load-env ]
#    runs-on: self-hosted
#    container:
#      image: docker://localhost:5000/rgl:latest
#      env:
#        OptiX_INSTALL_DIR: /optix
#        NVIDIA_DRIVER_CAPABILITIES: all
#      volumes:
#        - ${{ needs.load-env.outputs.optix-install-dir }}:/optix
#      options:
#        --gpus all
#        --user ${{ needs.load-env.outputs.user-id }}
#    steps:
#      - name: fix git
#        run: git config --global --add safe.directory $PWD
#      - name: build
#        run: ./setup.py --with-pcl --build-dir build-pcl
